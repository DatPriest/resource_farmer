@using ResourceFarmer.PlayerBase
@using Sandbox;
@using Sandbox.UI;
@using System.Linq;
@using System;
@using System.Collections.Generic;
@using ResourceFarmer.Resources;
@using ResourceFarmer.UI.Components;
@inherits PanelComponent
@namespace ResourceFarmer.UI

<root class="inventory_panel">
	<InventoryHeader 
		Title="Inventory" 
		TitleIcon="ðŸ“¦"
		CurrentCapacity="@(InventoryComponent?.CurrentCapacity ?? 0f)"
		MaxCapacity="@(InventoryComponent?.MaxCapacity ?? 1000f)"
		OnClose="@CloseInventory" />

	<FilterButtons 
		@ref="filterButtonsComponent"
		SearchFilter="@SearchFilter" 
		SortMode="@SortMode"
		SearchPlaceholder="Search resources..."
		OnSearchChanged="@OnSearchFilterChanged"
		OnSortChanged="@OnSortModeChanged" />

	<div class="inventory_content">
		@if (HasResources)
		{
			<div class="resource_grid">
				@foreach (var resource in GetFilteredAndSortedResources())
				{
					<InventorySlot 
						ResourceType="@resource.Key"
						Amount="@resource.Value"
						OnUse="@UseResource"
						OnSell="@SellResource"
						OnDragStart="@OnDragStart"
						OnMouseHover="@OnResourceHover"
						OnMouseExit="@OnResourceMouseExit" />
				}
			</div>
		}
		else
		{
			<div class="empty_inventory">
				<div class="empty_icon">ðŸ“­</div>
				<div class="empty_text">Your inventory is empty</div>
				<div class="empty_subtext">Gather resources to fill your inventory</div>
			</div>
		}
	</div>

	<ItemTooltip 
		ResourceType="@TooltipResource"
		Amount="@(TooltipResource != ResourceType.None ? GetResourceAmount(TooltipResource) : 0f)"
		IsVisible="@ShowTooltip"
		MouseX="@MouseX"
		MouseY="@MouseY" />

	@if (SelectedResource != ResourceType.None)
	{
		<div class="resource_details">
			<h4>@GetResourceDisplayName(SelectedResource)</h4>
			<p>Amount: @GetResourceAmount(SelectedResource)</p>
			<p>@GetResourceDescription(SelectedResource)</p>
		</div>
	}
</root>

@code 
{
	public Player LocalPlayer { get; set; }
	public PlayerInventoryComponent InventoryComponent { get; set; }
	
	private string SearchFilter { get; set; } = "";
	private string SortMode { get; set; } = "Name";
	private ResourceType SelectedResource { get; set; } = ResourceType.None;
	
	// Component references
	private FilterButtons filterButtonsComponent;
	
	// Tooltip state
	private ResourceType TooltipResource { get; set; } = ResourceType.None;
	private bool ShowTooltip { get; set; } = false;
	private float MouseX { get; set; } = 0f;
	private float MouseY { get; set; } = 0f;
	
	public bool HasResources => LocalPlayer?.Inventory?.Any() == true;

	protected override void OnStart()
	{
		base.OnStart();
		FindLocalPlayer();
		Style.Display = DisplayMode.None; // Start hidden
	}

	protected override void OnUpdate()
	{
		base.OnUpdate();
		if (LocalPlayer == null || !LocalPlayer.IsValid)
		{
			FindLocalPlayer();
		}
		
		// Setup filter buttons after component is rendered
		if (filterButtonsComponent != null && filterButtonsComponent.ActionButtons.Count == 0)
		{
			SetupFilterButtons();
		}
		
		// Handle keyboard shortcuts when inventory is open
		if (Style.Display == DisplayMode.Flex)
		{
			if (Input.Pressed("InventoryMenu") || Input.Pressed("Escape"))
			{
				CloseInventory();
			}
		}
	}

	private void SetupFilterButtons()
	{
		if (filterButtonsComponent != null)
		{
			filterButtonsComponent.AddActionButton("Sell All", "ðŸ’°", SellAllResources);
		}
	}

	// Filter event handlers
	private void OnSearchFilterChanged(string filter)
	{
		if (SearchFilter != filter)
		{
			SearchFilter = filter ?? "";
			StateHasChanged();
		}
	}

	private void OnSortModeChanged(string sortMode)
	{
		if (SortMode != sortMode)
		{
			SortMode = sortMode ?? "Name";
			StateHasChanged();
		}
	}

	// Tooltip event handlers
	private void OnResourceHover(ResourceType resourceType)
	{
		TooltipResource = resourceType;
		ShowTooltip = true;
		
		// Get mouse position (simplified - in real implementation you'd get actual mouse coords)
		MouseX = 100; // This would be actual mouse X
		MouseY = 100; // This would be actual mouse Y
		
		StateHasChanged();
	}

	private void OnResourceMouseExit()
	{
		ShowTooltip = false;
		TooltipResource = ResourceType.None;
		StateHasChanged();
	}

	void FindLocalPlayer()
	{
		LocalPlayer = Game.ActiveScene?.GetAllComponents<Player>()
			.FirstOrDefault(p => p.IsValid && p.Network.IsOwner);
		
		if (LocalPlayer != null)
		{
			InventoryComponent = LocalPlayer.Components.GetOrCreate<PlayerInventoryComponent>();
			if (InventoryComponent != null)
			{
				InventoryComponent.OwnerPlayer = LocalPlayer;
			}
		}
	}

	public void ShowInventory()
	{
		Style.Display = DisplayMode.Flex;
		SetMouseCapture(true);
	}

	public void CloseInventory()
	{
		Style.Display = DisplayMode.None;
		SetMouseCapture(false);
		SelectedResource = ResourceType.None;
	}

	private IEnumerable<KeyValuePair<ResourceType, float>> GetFilteredAndSortedResources()
	{
		if (LocalPlayer?.Inventory == null) return Enumerable.Empty<KeyValuePair<ResourceType, float>>();

		var resources = LocalPlayer.Inventory.AsEnumerable();

		// Apply search filter
		if (!string.IsNullOrEmpty(SearchFilter))
		{
			resources = resources.Where(kvp => 
				kvp.Key.ToString().Contains(SearchFilter, StringComparison.OrdinalIgnoreCase));
		}

		// Apply sorting
		resources = SortMode switch
		{
			"Amount" => resources.OrderByDescending(kvp => kvp.Value),
			"Type" => resources.OrderBy(kvp => GetResourceCategory(kvp.Key)).ThenBy(kvp => kvp.Key.ToString()),
			_ => resources.OrderBy(kvp => kvp.Key.ToString())
		};

		return resources;
	}

	private string GetResourceCategory(ResourceType resourceType)
	{
		return resourceType switch
		{
			ResourceType.Wood or ResourceType.Stone or ResourceType.Fiber => "Basic",
			ResourceType.CopperOre or ResourceType.TinOre or ResourceType.IronOre or 
			ResourceType.Coal or ResourceType.SilverOre or ResourceType.GoldOre or 
			ResourceType.MithrilOre or ResourceType.AdamantiteOre => "Ores",
			ResourceType.Quartz or ResourceType.RubyRough or ResourceType.SapphireRough or 
			ResourceType.EmeraldRough or ResourceType.DiamondRough => "Gems",
			ResourceType.EssenceDust or ResourceType.CrystalShard or 
			ResourceType.DragonScale or ResourceType.PhoenixFeather => "Magical",
			_ => "Other"
		};
	}

	private float GetResourceAmount(ResourceType resourceType)
	{
		return LocalPlayer?.Inventory?.GetValueOrDefault(resourceType, 0f) ?? 0f;
	}

	private void OnDragStart(DragEvent e, ResourceType resourceType)
	{
		// TODO: Implement drag & drop functionality
		SelectedResource = resourceType;
	}

	private void UseResource(ResourceType resourceType)
	{
		if (InventoryComponent != null)
		{
			bool success = InventoryComponent.ConsumeResource(resourceType, 1f);
			if (success)
			{
				Log.Info($"Used 1 {resourceType}");
			}
			else
			{
				Log.Info($"Cannot use {resourceType} - not enough resources");
			}
		}
	}

	private void SellResource(ResourceType resourceType)
	{
		if (LocalPlayer != null && LocalPlayer.Inventory.ContainsKey(resourceType))
		{
			float amount = LocalPlayer.Inventory[resourceType];
			float valuePerUnit = GetResourceValue(resourceType);
			float totalValue = amount * valuePerUnit;
			
			LocalPlayer.Inventory.Remove(resourceType);
			LocalPlayer.Money += totalValue;
			
			ResourceManager.Instance?.UpdateInventory(LocalPlayer.Inventory);
			Log.Info($"Sold {amount:F1} {resourceType} for ${totalValue:F2}");
		}
	}

	private void SellAllResources()
	{
		LocalPlayer?.SellResources();
	}

	// Helper methods for components
	private string GetResourceDisplayName(ResourceType resourceType)
	{
		return resourceType.ToString().Replace("Ore", " Ore").Replace("Rough", " (Rough)");
	}

	private string GetResourceDescription(ResourceType resourceType)
	{
		return resourceType switch
		{
			ResourceType.Wood => "Basic building and crafting material from trees.",
			ResourceType.Stone => "Common material for construction and tools.",
			ResourceType.Fiber => "Plant material used in crafting and textiles.",
			ResourceType.CopperOre => "Common metal ore used in basic alloys.",
			ResourceType.TinOre => "Metal ore used to create bronze when combined with copper.",
			ResourceType.IronOre => "Valuable metal ore for strong tools and weapons.",
			ResourceType.Coal => "Fuel source for smelting and advanced crafting.",
			ResourceType.SilverOre => "Precious metal ore with magical properties.",
			ResourceType.GoldOre => "Valuable precious metal ore for high-end crafting.",
			ResourceType.MithrilOre => "Legendary lightweight metal with magical properties.",
			ResourceType.AdamantiteOre => "Extremely rare and durable metal ore.",
			ResourceType.EssenceDust => "Magical dust used in enchantments.",
			ResourceType.CrystalShard => "Crystallized magical energy for powerful enchantments.",
			ResourceType.DragonScale => "Rare scale from ancient dragons, extremely valuable.",
			ResourceType.PhoenixFeather => "Mystical feather with regenerative properties.",
			_ => "A mysterious resource."
		};
	}

	private float GetResourceValue(ResourceType resourceType)
	{
		return resourceType switch
		{
			ResourceType.Wood => 0.5f,
			ResourceType.Stone => 0.8f,
			ResourceType.Fiber => 0.3f,
			ResourceType.CopperOre => 1.5f,
			ResourceType.TinOre => 1.8f,
			ResourceType.IronOre => 3.0f,
			ResourceType.Coal => 1.0f,
			ResourceType.SilverOre => 5.0f,
			ResourceType.GoldOre => 8.0f,
			ResourceType.MithrilOre => 15.0f,
			ResourceType.AdamantiteOre => 25.0f,
			ResourceType.Quartz => 2.0f,
			ResourceType.RubyRough => 10.0f,
			ResourceType.SapphireRough => 10.0f,
			ResourceType.EmeraldRough => 12.0f,
			ResourceType.DiamondRough => 20.0f,
			ResourceType.EssenceDust => 50.0f,
			ResourceType.CrystalShard => 100.0f,
			ResourceType.DragonScale => 500.0f,
			ResourceType.PhoenixFeather => 1000.0f,
			_ => 0.1f
		};
	}

	protected override int BuildHash()
	{
		if (LocalPlayer?.Inventory == null) return 0;
		
		var hash = new HashCode();
		hash.Add(SearchFilter);
		hash.Add(SortMode);
		hash.Add(SelectedResource);
		hash.Add(LocalPlayer.Inventory.Count);
		
		foreach (var kvp in LocalPlayer.Inventory.OrderBy(x => x.Key))
		{
			hash.Add(kvp.Key);
			hash.Add(kvp.Value);
		}
		
		return hash.ToHashCode();
	}
}